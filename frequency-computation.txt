We would modify the scripts of umapper.py, bmapper.py and tmapper.py to add the current result in a dictionary where the these grams will be key and value will be the number of times it appears in the song, so the value will initally set to 0. Also, we will check the dictionary see if the key exits already before we add any new key (any grams) to the dictionary.if the key already exits, then we will increase the value by 1 each time. After we finished reading each line , we will traverse through the dictionary and print key and "\t" followed by the value of the key (which will be number of the times same gram appear in the song). In the reducer scripts, we will store the these results in tuple which has these grams as key and the value of the these grams in the document they appear on. We can do that using previous and song_id variable as we implement in iireducer.py.This will help us to have the reduce results like "gram"  3,4,2,3,1. In this example, gram represents the grams like bigrams, trigrams, or unigrams and 3,4,2,3,1 represents the frequencies of the gram in 5 different songs (for example:  3 represent the gram frequency on 12th song). If we want to compute the average frequency of the gram throughout all documents for this case, we can add all these values and divide by 5.  